# --------------------------------------------------------------------------------------------------
# Copyright (c) Lukas Vik. All rights reserved.
#
# This file is part of the hdl-registers project, an HDL register generator fast enough to run
# in real time.
# https://hdl-registers.com
# https://github.com/hdl-registers/hdl-registers
# --------------------------------------------------------------------------------------------------

from __future__ import annotations

from typing import TYPE_CHECKING, Any

from hdl_registers.register_modes import REGISTER_MODES

from .constant_table import HtmlConstantTableGenerator
from .html_generator_common import HtmlGeneratorCommon
from .html_translator import HtmlTranslator
from .register_table import HtmlRegisterTableGenerator

if TYPE_CHECKING:
    from pathlib import Path


class HtmlPageGenerator(HtmlGeneratorCommon):
    """
    Generate a HTML page with register and constant information.
    See the :ref:`generator_html` article for usage details.
    """

    __version__ = "1.0.0"

    SHORT_DESCRIPTION = "HTML page"

    @property
    def output_file(self) -> Path:
        """
        Result will be placed in this file.
        """
        return self.output_folder / f"{self.name}_regs.html"

    def get_code(
        self,
        **kwargs: Any,  # noqa: ANN401, ARG002
    ) -> str:
        """
        Get a complete HTML page with register and constant information.
        """
        title = f"Documentation of {self.name} registers"

        generated_info = HtmlTranslator().translate(
            " ".join(self._get_generated_source_info(use_rst_annotation=True))
        )

        html = f"""\
<!DOCTYPE html>
<html xmlns="http://www.w3.org/1999/xhtml" xml:lang="en" lang="en">
<head>
  <meta charset="utf-8" />
  <meta name="viewport" content="width=device-width, initial-scale=1" />
  <title>{title}</title>
  <style type="text/css">
{self.get_page_style()}
  </style>
</head>
<body>
  <h1>{title}</h1>
  <p>This document is a specification for the register interface of the FPGA module \
<b>{self.name}</b>.</p>
{generated_info}
  <h2>Register modes</h2>
  <p>The following register modes are available.</p>
{self._get_mode_descriptions()}
"""

        html += "  <h2>Registers</h2>\n"
        if self.register_list.register_objects:
            register_table_generator = HtmlRegisterTableGenerator(
                register_list=self.register_list, output_folder=self.output_folder
            )
            html += f"""
  <p>The following registers make up the register list.</p>
{register_table_generator.get_code()}
"""
        else:
            html += "  <p>This module does not have any registers.</p>"

        html += "  <h2>Constants</h2>\n"
        if self.register_list.constants:
            constant_table_generator = HtmlConstantTableGenerator(
                register_list=self.register_list, output_folder=self.output_folder
            )
            html += f"""
  <p>The following constants are part of the register interface.</p>
{constant_table_generator.get_code()}"""
        else:
            html += "  <p>This module does not have any constants.</p>"

        html += """
</body>
</html>
"""

        return html

    @staticmethod
    def get_page_style(
        font_style: str | None = None,
        table_style: str | None = None,
        math_style: str | None = None,
        extra_style: str = "",
    ) -> str:
        """
        Get a CSS style for the register pages.

        Return:
            str: CSS code.
        """
        if font_style is None:
            font_style = """\
html * {
  font-family: "Trebuchet MS", Arial, Helvetica, sans-serif;
}

a {
  color: #4C7AAF;
}
"""

        if table_style is None:
            table_style = """\
table {
  border-collapse: collapse;
}

td, th {
  border-width: 0.1em;
  border-style: solid;
  border-color: #ddd;
  padding-left: 0.5em;
  padding-right: 0.5em;
  padding-top: 0;
  padding-bottom: 0;
}

th {
  padding-top: 0.7em;
  padding-bottom: 0.7em;
  text-align: left;
  background-color: #4CAF50;
  color: white;
}

tr:nth-child(odd) {
  background-color: #ffffff;
}

tr:nth-child(even) {
  background-color: #ebebeb;
}

td.array_header {
  border-top-width: 0.7em;
  border-top-color: #4C7AAF;
}

td.array_footer {
  border-bottom-width: 0.7em;
  border-bottom-color: #4C7AAF;
}

td > p {
  margin-top: 0.5em;
  margin-bottom: 0.5em;

  &:not(:last-child)  {
    margin-bottom: 0.9em;
  }
}

li > p {
  margin-top: 0.4em;
  margin-bottom: 0.4em;
}
"""

        if math_style is None:
            math_style = """\
/*
* CSS below is taken from the HTML output of 'docutils'.
* Original code is released under the terms of the 2-Clause BSD license and is Copyright (C)
*   2009,2010 Alex Fernandez
*   2021      Gunter Milde
*
* Code is generated by running
*   from docutils.core import publish_parts
*   from docutils.writers.html5_polyglot import Writer
*   print(publish_parts(rst,  writer=Writer())["stylesheet"])
* where 'rst' contains both inline and block math.
*/

/* Formulas */
.formula {
  text-align: center;
  margin: 1.2em 0;
  line-height: 1.4;
}
span.formula {
  white-space: nowrap;
}
div.formula {
  padding: 0.5ex;
  margin-left: auto;
  margin-right: auto;
}

/* Basic features */
a.eqnumber {
  display: inline-block;
  float: right;
  clear: right;
  font-weight: bold;
}
span.unknown {
  color: #800000;
}
span.ignored, span.arraydef {
  display: none;
}
.phantom {
  visibility: hidden;
}
.formula i {
  letter-spacing: 0.1ex;
}

/* Alignment */
.align-left, .align-l {
  text-align: left;
}
.align-right, .align-r {
  text-align: right;
}
.align-center, .align-c {
  text-align: center;
}

/* Structures */
span.hspace {
  display: inline-block;
}
span.overline, span.bar {
  text-decoration: overline;
}
.fraction, .fullfraction, .textfraction {
  display: inline-block;
  vertical-align: middle;
  text-align: center;
}
span.formula .fraction,
.textfraction,
span.smallmatrix {
  font-size: 80%;
  line-height: 1;
}
span.numerator {
  display: block;
  line-height: 1;
}
span.denominator {
  display: block;
  line-height: 1;
  padding: 0ex;
  border-top: thin solid;
}
.formula sub, .formula sup {
  font-size: 80%;
}
sup.numerator, sup.unit {
  vertical-align: 80%;
}
sub.denominator, sub.unit {
  vertical-align: -20%;
}
span.smallsymbol {
  font-size: 75%;
  line-height: 75%;
}
span.boldsymbol {
  font-weight: bold;
}
span.sqrt {
  display: inline-block;
  vertical-align: middle;
  padding: 0.1ex;
}
sup.root {
  position: relative;
  left: 1.4ex;
}
span.radical {
  display: inline-block;
  padding: 0ex;
  /* font-size: 160%; for DejaVu, not required with STIX */
  line-height: 100%;
  vertical-align: top;
  vertical-align: middle;
}

span.root {
  display: inline-block;
  border-top: thin solid;
  padding: 0ex;
  vertical-align: middle;
}
div.formula .bigoperator,
.displaystyle .bigoperator,
.displaystyle .bigoperator {
  line-height: 120%;
  font-size: 140%;
  padding-right: 0.2ex;
}
span.fraction .bigoperator,
span.scriptstyle .bigoperator {
  line-height: inherit;
  font-size: inherit;
  padding-right: 0;
}
span.bigdelimiter {
  display: inline-block;
}
span.bigdelimiter.size1 {
  transform: scale(1, 1.2);
  line-height: 1.2;
}
span.bigdelimiter.size2 {
  transform: scale(1, 1.62);
  line-height: 1.62%;

}
span.bigdelimiter.size3 {
  transform: scale(1, 2.05);
  line-height: 2.05%;
}
span.bigdelimiter.size4 {
  transform: scale(1, 2.47);
  line-height: 2.47%;
}
/* vertically stacked sub and superscript */
span.scripts {
  display: inline-table;
  vertical-align: middle;
  padding-right: 0.2ex;
}
.script {
  display: table-row;
  text-align: left;
  line-height: 150%;
}
span.limits {
  display: inline-table;
  vertical-align: middle;
}
.limit {
  display: table-row;
  line-height: 99%;
}
sup.limit, sub.limit {
  line-height: 100%;
}
span.embellished,
span.embellished > .base {
  display: inline-block;
}
span.embellished > sup,
span.embellished > sub {
  display: inline-block;
  font-size: 100%;
  position: relative;
  bottom: 0.3em;
  width: 0px;
}
span.embellished > sub {
  top: 0.4em;
}

/* Environments */
span.array, span.bracketcases, span.binomial, span.environment {
  display: inline-table;
  text-align: center;
  vertical-align: middle;
}
span.arrayrow, span.binomrow {
  display: table-row;
  padding: 0;
  border: 0;
}
span.arraycell, span.bracket, span.case, span.binomcell, span.environmentcell {
  display: table-cell;
  padding: 0ex 0.2ex;
  line-height: 1; /* 99%; */
  border: 0ex;
}
.environment.align > .arrayrow > .arraycell.align-l {
  padding-right: 2em;
}

/* Inline binomials */
span.binom {
  display: inline-block;
  vertical-align: middle;
  text-align: center;
  font-size: 80%;
}
span.binomstack {
  display: block;
  padding: 0em;
}

/* Over- and underbraces */
span.overbrace {
  border-top: 2pt solid;
}
span.underbrace {
  border-bottom: 2pt solid;
}

/* Stackrel */
span.stackrel {
  display: inline-block;
  text-align: center;
}
span.upstackrel {
  display: block;
  padding: 0em;
  font-size: 80%;
  line-height: 64%;
  position: relative;
  top: 0.15em;

}
span.downstackrel {
  display: block;
  vertical-align: bottom;
  padding: 0em;
}

/* Fonts */
.formula {
  font-family: STIX, "DejaVu Serif", "DejaVu Math TeX Gyre", serif;
}
span.radical,   /* ensure correct size of square-root sign */
span.integral { /* upright integral signs for better alignment of indices */
  font-family: "STIXIntegralsUp", STIX;
  /* font-size: 115%; match apparent size with DejaVu */
}
span.bracket {
  /* some "STIX" and "DejaVu Math TeX Gyre" bracket pieces don't fit */
  font-family: "DejaVu Serif", serif;
}
span.mathsf, span.textsf {
  font-family: sans-serif;
}
span.mathrm, span.textrm {
  font-family: STIX, "DejaVu Serif", "DejaVu Math TeX Gyre", serif;
}
span.mathtt, span.texttt {
  font-family: monospace;
}
span.text, span.textnormal,
span.mathsf, span.mathtt, span.mathrm {
  font-style: normal;
}
span.fraktur {
  font-family: "Lucida Blackletter", eufm10, blackletter;
}
span.blackboard {
  font-family: Blackboard, msbm10, serif;
}
span.scriptfont {
  font-family: "Monotype Corsiva", "Apple Chancery", "URW Chancery L", cursive;
  font-style: italic;
}
span.mathscr {
  font-family: MathJax_Script, rsfs10,  cursive;
  font-style: italic;
}
span.textsc {
  font-variant: small-caps;
}
span.textsl {
  font-style: oblique;
}

/* Colors */
span.colorbox {
  display: inline-block;
  padding: 5px;
}
span.fbox {
  display: inline-block;
  border: thin solid black;
  padding: 2px;
}
span.boxed, span.framebox {
  display: inline-block;
  border: thin solid black;
  padding: 5px;
}
/* End docutils CSS */
"""

        return f"""\
.literal {{
  font-family: monospace;
  white-space: pre-wrap;
  color: #e74c3c;
  background-color: #ffffff;
  padding-left: 0.4em;
  padding-right: 0.4em;
  padding-top: 0.2em;
  padding-bottom: 0.2em;
  border-width: 0.1em;
  border-style: solid;
  border-color: #ddd;
}}

.literal > span.pre {{
  white-space: nowrap;
}}

{font_style}
{table_style}
{math_style}
{extra_style}"""

    @staticmethod
    def _get_mode_descriptions() -> str:
        html = """
<table>
<thead>
  <tr>
    <th>Mode</th>
    <th>Description</th>
  </tr>
</thead>
<tbody>"""

        for mode in REGISTER_MODES.values():
            html += f"""
<tr>
  <td><p>{mode.name}</p></td>
  <td><p>{mode.description}</p></td>
</tr>
"""
        html += """
</tbody>
</table>"""
        return html
