# --------------------------------------------------------------------------------------------------
# Copyright (c) Lukas Vik. All rights reserved.
#
# This file is part of the hdl-registers project, an HDL register generator fast enough to run
# in real time.
# https://hdl-registers.com
# https://github.com/hdl-registers/hdl-registers
# --------------------------------------------------------------------------------------------------

# Standard libraries
from abc import ABC, abstractmethod


class PythonRegisterAccessorInterface(ABC):
    """
    Interface base class for accessing register values on a target system.
    To be used with code generated by :class:`.PythonAccessorGenerator`.
    See the :ref:`Python generator documentation <generator_python>` for usage details.

    In order to use :class:`.PythonAccessorGenerator` class to read/write/print register and
    field values, you must implement the methods of this interface in a subclass.
    You must implement them to use whichever method you have available
    to access register values on your target (SSH, telnet, UART, ...).
    These details vary greatly in different projects, and is something that hdl-registers
    can not provide a generic solution for.

    The byte address that shall be accessed, in both the methods, is

        register_list_base_address + register_address

    where ``register_list_base_address`` is the the base address of the requested register
    list on your register bus.
    Logic for finding this base address, probably using ``register_list_name``, must be
    implemented given the layout of your system.

    You are free to raise any exceptions you want in your implementation of the methods.
    For example, unknown register list name, invalid address, timeout, bus error, etc.
    Exceptions will not be caught by :class:`.PythonAccessorGenerator` code,
    but will instead be propagated to the user wherever the accessor is used.
    """

    @abstractmethod
    def read_register(self, register_list_name: str, register_address: int) -> int:
        """
        Read the value of a register.

        Arguments:
            register_list_name: Name of the register list that the requested register belongs to.
            register_address: Byte address of the register, within the register list.
        Return:
            The register value that was read, as an unsigned 32-bit number.
        """

    @abstractmethod
    def write_register(
        self, register_list_name: str, register_address: int, register_value: int
    ) -> None:
        """
        Write a register.

        Arguments:
            register_list_name: Name of the register list that the requested register belongs to.
            register_address: Byte address of the register, within the register list.
            register_value: The value that shall be written, as an unsigned 32-bit number.
        """
