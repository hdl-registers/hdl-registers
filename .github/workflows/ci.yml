name: ci


# ------------------------------------------------------------------------------
on:
  # Run when a pull request is opened or updated.
  pull_request:
  push:
    # Run when a version tag is pushed.
    tags:
      - 'v*'
    # Run from main when a pull request is merged.
    branches:
      - main
  # Add possibility of running manually from webpage.
  workflow_dispatch:
  # Run nightly at 20:45 UTC.
  schedule:
  - cron: 45 20 * * *



# ------------------------------------------------------------------------------
# https://www.meziantou.net/how-to-cancel-github-workflows-when-pushing-new-commits-on-a-branch.htm
concurrency:
  group: ${{ github.workflow }}-${{ github.event.pull_request.number || github.ref }}

  # Cancel in-progress runs when a new workflow with the same group name is triggered.
  cancel-in-progress: true


# ------------------------------------------------------------------------------
jobs:

  # ------------------------------------------------------------------------------
  # Run all Python-based tests.

  pytest:
    name: Run Python tests
    strategy:
      matrix:
        os: ['ubuntu-24.04', 'windows-latest', 'macos-latest']
        py: ['3.9', '3.10', '3.11', '3.12', '3.13']
    runs-on: ${{ matrix.os }}
    steps:

    - name: Checkout
      uses: actions/checkout@08c6903cd8c0fde910a37f88322edcfb5dd907a8 # v5.0.0

    - name: Setup Python
      uses: actions/setup-python@a26af69be951a213d495a4c3e4e4022e16d87065 # v5.6.0
      with:
        python-version: ${{ matrix.py }}
        cache: pip
        cache-dependency-path: hdl_registers/requirements_develop.txt

    - name: Install Python packages
      run: |
        python3 -m pip install black docutils peakrdl-regblock pytest PyYAML rtoml termcolor tomli_w

    - name: Clone dependency repos
      run: |
        git clone --depth 1 --single-branch --branch main https://github.com/tsfpga/tsfpga.git ../../tsfpga/tsfpga
        git clone --depth 1 --single-branch --branch main https://github.com/hdl-modules/hdl-modules.git ../../hdl-modules/hdl-modules

    # Run only the UNIT tests on most Python versions in the matrix.
    # This is very fast (2-3 s).
    - name: Run unit tests
      if: matrix.os != 'ubuntu-24.04' || matrix.py != '3.13'
      run: |
        python3 -m pytest --verbose hdl_registers

    # On one Python version however, we run ALL the Python-based tests, which requires a few more
    # dependencies, and then we collect coverage from this run.
    - name: Setup GHDL
      if: matrix.os == 'ubuntu-24.04' && matrix.py == '3.13'
      uses: ghdl/setup-ghdl@09e61b6db92fe2766a0b0a4b82505a47d67570be # v1.2.1

    - name: Setup Verilator
      if: matrix.os == 'ubuntu-24.04' && matrix.py == '3.13'
      uses: veryl-lang/setup-verilator@b155747595eb4b817473a83045ba1da581c4084b # v1.0.3

    - name: Install further Python packages
      if: matrix.os == 'ubuntu-24.04' && matrix.py == '3.13'
      run: |
        python3 -m pip install \
          GitPython \
          pybadges \
          pytest-cov \
          pytest-xdist \
          requests \
          ruff \
          vunit-hdl@git+https://github.com/VUnit/vunit.git

    # Run ALL tests, including unit, lint and functional ones.
    # The execution time goes from 1:13 -> 0:50 when two threads are used.
    - name: Run all tests
      if: matrix.os == 'ubuntu-24.04' && matrix.py == '3.13'
      run: |
        python3 -m pytest \
          --verbose \
          --numprocesses 2 \
          --cov hdl_registers \
          --cov-report xml:generated/python_coverage.xml \
          --cov-report html:generated/python_coverage_html \
          hdl_registers \
          tests

    - name: Upload coverage artifacts
      if: matrix.os == 'ubuntu-24.04' && matrix.py == '3.13'
      uses: actions/upload-artifact@ea165f8d65b6e75b540449e92b4886f43607fa02 # v4.6.2
      with:
        name: coverage
        path: generated/python_coverage*


  # ------------------------------------------------------------------------------
  # Build HTML documentation for website.

  build_doc:
    name: Build HTML documentation
    needs: pytest
    runs-on: ubuntu-latest
    steps:

    - name: Checkout
      uses: actions/checkout@08c6903cd8c0fde910a37f88322edcfb5dd907a8 # v5.0.0

    - name: Setup Python
      uses: actions/setup-python@a26af69be951a213d495a4c3e4e4022e16d87065 # v5.6.0
      with:
        python-version: 3.13
        cache: pip
        cache-dependency-path: hdl_registers/requirements_develop.txt

    - name: Install Python packages
      run: |
        pip install \
          black \
          docutils \
          GitPython \
          peakrdl-regblock \
          pybadges \
          PyYAML \
          rtoml \
          setuptools \
          sphinx \
          sphinx_sitemap \
          sphinx-rtd-theme \
          sphinx-toolbox \
          sphinxcontrib-googleanalytics \
          sphinxext-opengraph \
          termcolor \
          tomli_w

    - name: Clone dependency repos
      run: |
        git clone --depth 1 --single-branch --branch main \
          https://github.com/tsfpga/tsfpga.git ../../tsfpga/tsfpga

    - name: Download coverage artifacts
      uses: actions/download-artifact@634f93cb2916e3fdff6788551b99b062d0335ce0 # v5.0.0
      with:
        name: coverage
        path: generated

    - name: Run job
      run: |
        # Without tags, 'build_docs.py' can not find all git tags fo release history.
        # Note that 'fetch-tags: true' on the checkout actions did not work (2023-11-29).
        git fetch --all --tags
        python3 tools/build_docs.py

    - name: Configure Pages
      if: github.ref == 'refs/heads/main'
      uses: actions/configure-pages@983d7736d9b0ae728b81ab479565c72886d7745b # v5.0.0

    - name: Upload Pages Artifact
      if: github.ref == 'refs/heads/main'
      uses: actions/upload-pages-artifact@7b1f4a764d45c48632c6b24a0339c27f5614fb0b # v4.0.0
      with:
        path: generated/sphinx_html


  # ------------------------------------------------------------------------------
  # Deploy the previously built HTML to GitHub Pages.

  deploy_pages:
    name: Deploy website to pages
    if: github.ref == 'refs/heads/main'
    # Only do deployment if everything else has passed.
    needs: [pytest, build_doc]
    permissions:
      pages: write
      id-token: write
    environment:
      name: github-pages
      url: ${{ steps.deployment.outputs.page_url }}
    runs-on: ubuntu-latest
    steps:

      - name: Deploy to GitHub Pages
        id: deployment
        uses: actions/deploy-pages@d6db90164ac5ed86f2b6aed7e0febac5b3c0c03e # v4.0.5


  # ------------------------------------------------------------------------------
  # Python release package to PyPI.

  release_pypi:
    name: PyPI release
    # Deploy new version when a version tag is pushed.
    if: github.ref_type == 'tag' && contains(github.ref_name, 'v')
    # Only do deployment if everything else has passed.
    needs: [pytest, build_doc]
    runs-on: ubuntu-latest
    steps:

      - name: Checkout
        uses: actions/checkout@08c6903cd8c0fde910a37f88322edcfb5dd907a8 # v5.0.0

      - name: Setup Python
        uses: actions/setup-python@a26af69be951a213d495a4c3e4e4022e16d87065 # v5.6.0
        with:
          python-version: '3.13'
          cache: pip
          cache-dependency-path: hdl_registers/requirements_develop.txt

      - name: Install Python packages
        run: |
          python3 -m pip install build

      - name: Build artifact
        run: python3 -m build

      - name: Deploy artifact
        uses: pypa/gh-action-pypi-publish@ed0c53931b1dc9bd32cbe73a98c7f6766f8a527e # 1.13.0
        with:
          password: ${{ secrets.PYPI_API_TOKEN }}


  # ------------------------------------------------------------------------------
  # Test that the latest PyPI release can be installed.

  test_pypi:
    name: Test latest PyPI release
    # Run only on main branch.
    # Nightly or when triggered manually.
    # We don't want to waste CI time by running this to often.
    if: |
      github.ref == 'refs/heads/main' &&
      (github.event_name == 'schedule' || github.event_name == 'workflow_dispatch')
    runs-on: ubuntu-latest
    steps:

      - name: Checkout
        uses: actions/checkout@08c6903cd8c0fde910a37f88322edcfb5dd907a8 # v5.0.0

      - name: Setup Python
        uses: actions/setup-python@a26af69be951a213d495a4c3e4e4022e16d87065 # v5.6.0

      - name: Install latest release
        run: python3 -m pip install hdl-registers

      - name: Run test script
        # 'cd' into the folder to guarantee that hdl-registers from PyPI is used.
        run: cd tools && python3 pypi_test_script.py
